#! /bin/bash

# define as a function to use local variables
___activate() {

    local name path
    # get repository name
    path="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
    # name is the basename w/o version, unsafe replaced with _, and upper-case
    name="$(
        basename "$path" | sed -e 's/[-.].*//g; s/[^A-Za-z0-9_]/_/g' |
        tr '[:lower:]' '[:upper:]'
    )"
    # make sure the repo name has at least some non-underscore characters
    if [[ -z "${name//_}" ]]; then name=REPO; fi

    # show help
    for arg in "$@"; do if [[ "$arg" == '--help' ]]; then
        printf 'Activate the environment for %s\n' "$name"
        printf '\nusage: . %q [--help]\n' "${BASH_SOURCE[0]}"
        printf '\narguemnt:\n'
        printf '  --help  print this message and quit w/o activating\n'
        printf '\nactions taken:\n'
        printf '  - set %s\n' "$name"
        printf '  - add $%s/bin and $%s/venv/bin to front of PATH\n' \
            "$name" "$name"
        printf '  - add $%s/pylib to front of PYTHONPATH\n' "$name"
        printf '  - set VIRTUAL_ENV\n'
        return 1
    fi; done

    # check prerequisites
    if ! "${path?}/check-prerequisites"; then
        return 1
    fi

    # deactivate previous version
    if [[ -n "${!name}" ]]; then
        # source deactivate, while preserving name and path
        . "${path}/deactivate"
    fi

    # export <REPO_NAME>, PATH, PYTHONPATH, VIRTUAL_ENV
    if [[ -d "${path?}/venv/bin" ]]; then
        export PATH="${path?}/venv/bin:$PATH"
        export VIRTUAL_ENV="${path?}/venv"
    fi
    if ! export PYTHONPATH="${path?}/pylib:${PYTHONPATH?}" 2>/dev/null; then
        export PYTHONPATH="${path?}/pylib"
    fi
    export "${name?}"="${path?}"
    export PATH="${path?}/bin:${PATH?}"
    hash -r 2>/dev/null  # ensures PATH is re-searched, since we changed it

    # tell the user that we're activated
    if [[ -t 1 ]]; then
        printf 'activated %s=%q\n' "$name" "${path?}"
    fi
}

# sourced
if (return 0 2>/dev/null); then
    # activate...
    if ___activate "$@"; then
        unset -f ___activate
    else
        unset -f ___activate
        return 1
    fi
    # ...and run any specified command
    if (($#)); then
        "$@"
        return $?
    fi
# directly run
else
    # activate...
    if ___activate "$@"; then
        unset -f ___activate
    else
        unset -f ___activate
        exit 1
    fi
    # ...and run any specified command...
    if (($#)); then
        "$@"
        exit $?
    # ...or just a bash sub-shell
    else
        if [[ -t 1 ]]; then
            printf 'running in a bash sub-shell, exit to deactivate\n'
        fi
        bash
        exit $?
    fi
fi

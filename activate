#! /bin/bash

# help
for arg in "$@"; do
    if [[ "$arg" == '--help' ]]; then
        echo 'Activate the environment for this repo'
        printf '\nusage: . %q [--help]\n' "${BASH_SOURCE[0]}"
        return 1
    fi
done

# set root directory
TEMPLATE__prev="$TEMPLATE"
TEMPLATE="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
if [[ -z "$TEMPLATE" ]]; then
    printf '%s\n' 'could not determine project root directory' >&2
    return 1
fi
export TEMPLATE

# check prerequisites
"$TEMPLATE/check-prerequisites" || return 1

# define a function to do the hard work of basic string editing in bash
_TEMPLATE__edit_path() {

    # name arguments
    local name="$1"
    local subpath="$2"

    # declare locals
    local added=false p='' old_p='' new_p='' new_path=''
    local -a orig_paths=()

    # decide on paths to add or remove
    if [[ -n "$TEMPLATE" ]]; then
        new_p="$TEMPLATE/$subpath"
    fi
    if [[ -n "$TEMPLATE__prev" ]]; then
        old_p="$TEMPLATE__prev/$subpath"
    fi

    # read PATH
    IFS=: read -r -a orig_paths <<< "${!name}:"

    # edit paths
    for p in "${orig_paths[@]}"; do

        # replace old path
        if [[ -n "$old_p" ]] && [[ "$p" == "$old_p" ]]; then
            new_path+="$new_p:"
            added=true

        # keep unrelated paths intact
        else
            new_path+="$p:"
        fi

    done

    # prepend the new path, if it hasn't already replace an old one
    if ! $added; then
        new_path="$new_p:$new_path"
    fi

    # export new path
    export "$name=${new_path%:}"
}

# edit PATH, PYTHONPATH, VIRTUAL_ENV accordingly
if [[ -d "$TEMPLATE/venv/bin" ]]; then
    _TEMPLATE__edit_path PATH venv/bin
    export VIRTUAL_ENV="$TEMPLATE/venv"
fi
_TEMPLATE__edit_path PATH bin
_TEMPLATE__edit_path PYTHONPATH pylib

# clean up
unset TEMPLATE__prev
unset -f _TEMPLATE__edit_path
hash -r 2>/dev/null  # ensures PATH is re-searched, since we changed it

# if given a command, run it
if (($#)); then
    "$@"
# if not source, run a sub-shell
elif ! (return 0 2>/dev/null); then
    if [[ -t 1 ]]; then
        printf "running in a bash sub-shell (because activate wasn't sourced)\n"
    fi
    bash
# if sourced and interactive, then announce that we're activated
elif [[ -t 1 ]]; then
    printf 'activated TEMPLATE=%q\n' "$TEMPLATE"
fi

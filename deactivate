#! /bin/bash

# prevent inadvertent running without source
if ! (return 0 2>/dev/null); then
    printf 'usage: source %q\n' "$0" >&2
    printf '%q: error: must be sourced, not run directly\n' "$0" >&2
    exit 1
fi

# define as a function to use local variables
___deactivate() {

    local name dir key _value
    # get repository name
    dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
    # name is the basename w/o version, unsafe replaced with _, and upper-case
    name="$(
        basename "$dir" | sed -e 's/[-.].*//g; s/[^A-Za-z0-9_]/_/g' |
        tr '[:lower:]' '[:upper:]'
    )"
    # make sure the repo name has at least some non-underscore characters
    if [[ -z "${name//_}" ]]; then name=REPO; fi

    # show help
    for arg in "$@"; do if [[ "$arg" == '--help' ]]; then
        printf 'Deactivate the environment for %s\n' "$name"
        printf '\nusage: . %q [--help]\n' "${BASH_SOURCE[0]}"
        printf '\narguemnt:\n'
        printf '  --help  print this message and quit w/o deactivating\n'
        printf '\nactions taken:\n'
        printf '  - remove $%s/bin and $%s/venv/bin from PATH\n' "$name" "$name"
        printf '  - remove $%s/pylib from PYTHONPATH\n' "$name"
        printf '  - unset %s and %s_* variables\n' "$name"  "$name"
        printf '  - unset VIRTUAL_ENV from %s if applicable\n' "$name"
        return 1
    fi; done

    # make path removal function
    ___rm_path() {
        local name="$1" rm_path="$2" p path=''
        while IFS= read -d : -r p; do
            if [[ "$p" == "$rm_path" ]]; then continue; fi
            path+="$p:"
        done <<< "${!name}:"
        export "$name=${path%:}"
    }

    # remove from PATH, PYTHONPATH, and VIRTUAL_ENV
    ___rm_path PATH "$dir/bin"
    ___rm_path PYTHONPATH "$dir/pylib"
    if [[ "$VIRTUAL_ENV" == "$dir/venv" ]]; then
        ___rm_path PATH "$dir/venv/bin"
        unset VIRTUAL_ENV
    fi
    unset -f ___rm_path
    hash -r 2>/dev/null  # ensures PATH is re-searched, since we changed it

    # remove repo variables
    while IFS='=' read -r -d '' key ___value; do
        if [[ "$key" == "$name"_* ]]; then
            unset "$key"
        fi
    done < <(env -0)

    # tell the user what we did
    if [[ -t 1 ]]; then
        printf 'deactivated %s=%q\n' "$name" "${!name}"
    fi
    unset "$name"

}

# run and delete function, then return 0 or 1
if ___deactivate "$@"; then
    unset -f ___deactivate
    return 0
else
    unset -f ___deactivate
    return 1
fi
